name: CI/CD Pipeline

on:
  push:
    branches:
      - "**"
    tags:
      - "*"
  pull_request:
    branches:
      - main

jobs:
  build-users:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install
        working-directory: ./users

      - name: Run tests
        run: npm test
        working-directory: ./users

  build:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    outputs:
      tag_name: ${{ steps.get_tag_name.outputs.tag_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract tag name
        id: get_tag_name
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=${TAG_NAME}" >> $GITHUB_ENV
          echo "::set-output name=tag_name::${TAG_NAME}"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Extract metadata (tags, labels) for Docker
        id: meta2
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/api

      - name: Sanitize tags
        id: sanitize_tags
        run: |
          tags=${{ steps.meta2.outputs.tags }}
          sanitized_tags=$(echo $tags | sed 's|,| |g' | xargs -n1 | grep -v '^/')
          echo "sanitized_tags=$sanitized_tags" >> $GITHUB_ENV
          echo "::set-output name=sanitized_tags::$sanitized_tags"

      - name: Build and Push Docker API Image
        uses: docker/build-push-action@v4
        id: docker_build_backend
        with:
          context: ./users
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.sanitize_tags.outputs.sanitized_tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-config:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout config repo
        uses: actions/checkout@v2
        with:
          repository: https://github.com/vuitinhvl7x/VDT2024-api-config
          token: ${{ secrets.GITHUB_TOKEN }}
          path: config-repo

      - name: Install yq
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install yq

      - name: Update image tag in values.yaml
        run: |
          cd config-repo
          yq eval '.image.tag = "${{ needs.build.outputs.tag_name }}"' -i values.yaml
          git config --global user.email "xuanhai2708@gmail.com"
          git config --global user.name "vuitinhvl7x"
          git add values.yaml
          git commit -m "Update image tag to ${{ needs.build.outputs.tag_name }}"
          git push
